{
  "version": 3,
  "sources": ["../../../app/routes/select_centre.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\select_centre.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\select_centre.tsx\");\n  import.meta.hot.lastModified = \"1706366171045.2087\";\n}\n// REMIX HMR END\n\n//import React, { useState } from 'react';\n\nexport default function SelectCentre() {\n  function initMap() {\n    const bounds = new google.maps.LatLngBounds();\n    const markersArray = [];\n    const map = new google.maps.Map(document.getElementById(\"map\"), {\n      center: {\n        lat: 55.53,\n        lng: 9.4\n      },\n      zoom: 10\n    });\n\n    // initialize services\n    const geocoder = new google.maps.Geocoder();\n    const service = new google.maps.DistanceMatrixService();\n\n    // build request\n    const origin1 = {\n      lat: 55.93,\n      lng: -3.118\n    };\n    const origin2 = \"Greenwich, England\";\n    const destinationA = \"Stockholm, Sweden\";\n    const destinationB = {\n      lat: 50.087,\n      lng: 14.421\n    };\n    const request = {\n      origins: [origin1, origin2],\n      destinations: [destinationA, destinationB],\n      travelMode: google.maps.TravelMode.DRIVING,\n      unitSystem: google.maps.UnitSystem.METRIC,\n      avoidHighways: false,\n      avoidTolls: false\n    };\n\n    // put request on page\n    document.getElementById(\"request\").innerText = JSON.stringify(request, null, 2);\n\n    // get distance matrix response\n    service.getDistanceMatrix(request).then(response => {\n      // put response\n      document.getElementById(\"response\").innerText = JSON.stringify(response, null, 2);\n\n      // show on map\n      const originList = response.originAddresses;\n      const destinationList = response.destinationAddresses;\n      deleteMarkers(markersArray);\n      const showGeocodedAddressOnMap = asDestination => {\n        const handler = ({\n          results\n        }) => {\n          map.fitBounds(bounds.extend(results[0].geometry.location));\n          markersArray.push(new google.maps.Marker({\n            map,\n            position: results[0].geometry.location,\n            label: asDestination ? \"D\" : \"O\"\n          }));\n        };\n        return handler;\n      };\n      for (let i = 0; i < originList.length; i++) {\n        const results = response.rows[i].elements;\n        geocoder.geocode({\n          address: originList[i]\n        }).then(showGeocodedAddressOnMap(false));\n        for (let j = 0; j < results.length; j++) {\n          geocoder.geocode({\n            address: destinationList[j]\n          }).then(showGeocodedAddressOnMap(true));\n        }\n      }\n    });\n  }\n  function deleteMarkers(markersArray) {\n    for (let i = 0; i < markersArray.length; i++) {\n      markersArray[i].setMap(null);\n    }\n    markersArray = [];\n  }\n\n  //declare global {\n  // interface Window {\n  //   initMap: () => void;\n  // }\n}\n//window.initMap = initMap;\n_c = SelectCentre;\nvar _c;\n$RefreshReg$(_c, \"SelectCentre\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
